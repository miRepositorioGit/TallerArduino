<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/WebPage" style="height: auto;"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="chrome=1">
<script type="text/javascript">/* Copyright 2008 Google. */ (function() { (function(){function e(g){this.t={};this.tick=function(h,k,f){this.t[h]=[void 0!=f?f:(new Date).getTime(),k];if(void 0==f)try{window.console.timeStamp("CSI/"+h)}catch(m){}};this.tick("start",null,g)}var a;if(window.performance)var d=(a=window.performance.timing)&&a.responseStart;var l=0<d?new e(d):new e;window.jstiming={Timer:e,load:l};if(a){var b=a.navigationStart;0<b&&d>=b&&(window.jstiming.srt=d-b)}if(a){var c=window.jstiming.load;0<b&&d>=b&&(c.tick("_wtsrt",void 0,b),c.tick("wtsrt_","_wtsrt",
d),c.tick("tbsd_","wtsrt_"))}try{a=null,window.chrome&&window.chrome.csi&&(a=Math.floor(window.chrome.csi().pageT),c&&0<b&&(c.tick("_tbnd",void 0,window.chrome.csi().startE),c.tick("tbnd_","_tbnd",b))),null==a&&window.gtbExternal&&(a=window.gtbExternal.pageT()),null==a&&window.external&&(a=window.external.pageT,c&&0<b&&(c.tick("_tbnd",void 0,window.external.startE),c.tick("tbnd_","_tbnd",b))),a&&(window.jstiming.pt=a)}catch(g){}})(); })()
</script>
<link rel="shortcut icon" type="image/x-icon" href="https://www.google.com/images/icons/product/sites-16.ico">
<link rel="apple-touch-icon" href="https://ssl.gstatic.com/sites/p/5346a1/system/app/images/apple-touch-icon.png" type="image/png">
<script type="text/javascript">/* Copyright 2008 Google. */ (function() { function d(a){return document.getElementById(a)}window.byId=d;function g(a){return a.replace(/^\s+|\s+$/g,"")}window.trim=g;var h=[],k=0;window.JOT_addListener=function(a,b,c){var f=new String(k++);a={eventName:a,handler:b,compId:c,key:f};h.push(a);return f};window.JOT_removeListenerByKey=function(a){for(var b=0;b<h.length;b++)if(h[b].key==a){h.splice(b,1);break}};window.JOT_removeAllListenersForName=function(a){for(var b=0;b<h.length;b++)h[b].eventName==a&&h.splice(b,1)};
window.JOT_postEvent=function(a,b,c){var f={eventName:a,eventSrc:b||{},payload:c||{}};if(window.JOT_fullyLoaded)for(b=h.length,c=0;c<b&&c<h.length;c++){var e=h[c];e&&e.eventName==a&&(f.listenerCompId=e.compId||"",(e="function"==typeof e.handler?e.handler:window[e.handler])&&e(f))}else window.JOT_delayedEvents.push({eventName:a,eventSrc:b,payload:c})};window.JOT_delayedEvents=[];window.JOT_fullyLoaded=!1;
window.JOT_formatRelativeToNow=function(a,b){a=((new Date).getTime()-a)/6E4;if(1440<=a||0>a)return null;var c=0;60<=a&&(a/=60,c=2);2<=a&&c++;return b?window.JOT_siteRelTimeStrs[c].replace("__duration__",Math.floor(a)):window.JOT_userRelTimeStrs[c].replace("__duration__",Math.floor(a))}; })()
</script>
<script>

  

  var breadcrumbs = [{"path":"/site/wayneholder/keyplexlib-wayneplexing-on-arduino-made-easy","deleted":false,"title":"Introducing KeyPlexLib (or, \u0027Wayneplexing\u0027 on Arduino Made Easy)","dir":"ltr"}];
  var JOT_clearDotPath = 'https://ssl.gstatic.com/sites/p/5346a1/system/app/images/cleardot.gif';

  
  var JOT_userRelTimeStrs = ["hace un minuto","hace __duration__ minutos","hace una hora","hace __duration__ horas"];

  
  

  

  var webspace = {"gvizGstaticVersion":"current","enableAnalytics":true,"pageSharingId":"jotspot_page","codeembeds":{"outerIframeSrc":"https://www.gstatic.com/jotspot/embeds/code/0f08d42392f2000e7e3f3daf5b427a43/outer_iframe.html","innerIframeSrc":"https://634311211-jotspot-embeds.googleusercontent.com/code/8d87fa64604b2a11fae2ed06104c58d3/inner_iframe.html"},"enableUniversalAnalytics":false,"sharingPolicy":"OPENED","siteTitle":"Wayne\u0027s Tinkering Page","jot2atari":{"eligibility":"ineligible"},"onepickUrl":"https://docs.google.com/picker","adsensePublisherId":"ca-pub-3291769072277717","features":{"oAuthForChartsApi":true,"moreMobileStyleImprovements":null,"googleChartsOverGstatic":false,"picasaAlbumInsert":false,"subscriptionDataMigrationInProgress":false,"enableJot2Atari":true,"plusBadge":false},"isPublic":true,"newSitesBaseUrl":"https://sites.google.com","isConsumer":true,"serverFlags":{"jot2AtariLearnMoreUrl":"https://support.google.com/sites/answer/7035197"},"domainAnalyticsAccountId":"","plusPageId":"","signInUrl":"https://accounts.google.com/AccountChooser?continue\u003dhttps://sites.google.com/site/wayneholder/keyplexlib-wayneplexing-on-arduino-made-easy?showPrintDialog%3D1%26tmpl%3D%252Fsystem%252Fapp%252Ftemplates%252Fprint%252F\u0026service\u003djotspot","analyticsAccountId":"UA-16531951-1","scottyUrl":"/_/upload","homePath":"/","siteNoticeUrlEnabled":null,"plusPageUrl":"","adsensePromoClickedOrSiteIneligible":true,"csiReportUri":"https://gg.google.com/csi","sharingId":"jotspot","termsUrl":"//www.google.com/intl/es/policies/terms/","gvizVersion":1,"editorResources":{"sitelayout":["https://ssl.gstatic.com/sites/p/5346a1/system/app/css/sitelayouteditor.css"],"text":["https://ssl.gstatic.com/sites/p/5346a1/system/js/codemirror.js","https://ssl.gstatic.com/sites/p/5346a1/system/app/css/codemirror_css.css","https://ssl.gstatic.com/sites/p/5346a1/system/js/trog_edit__es.js","https://ssl.gstatic.com/sites/p/5346a1/system/app/css/trogedit.css","/site/wayneholder/_/rsrc/1559805672000/system/app/css/editor.css","https://ssl.gstatic.com/sites/p/5346a1/system/app/css/codeeditor.css","/site/wayneholder/_/rsrc/1559805672000/system/app/css/camelot/editor-jfk.css"]},"sharingUrlPrefix":"/_/sharing","isAdsenseEnabled":true,"domain":"defaultdomain","baseUri":"/site/wayneholder","name":"wayneholder","siteTemplateId":false,"siteNoticeRevision":null,"siteNoticeUrlAddress":null,"siteNoticeMessage":null,"page":{"isRtlLocale":false,"canDeleteWebspace":null,"isPageDraft":null,"parentPath":null,"parentWuid":null,"siteLocale":"en","timeZone":"America/Los_Angeles","type":"text","title":"Introducing KeyPlexLib (or, \u0027Wayneplexing\u0027 on Arduino Made Easy)","locale":"es","wuid":"wuid:gx:4e1b64425a1ec566","revision":62,"path":"/keyplexlib-wayneplexing-on-arduino-made-easy","isSiteRtlLocale":false,"pageInheritsPermissions":null,"name":"keyplexlib-wayneplexing-on-arduino-made-easy","canChangePath":true,"state":"","properties":{},"bidiEnabled":false,"currentTemplate":{"path":"/system/app/pagetemplates/text","title":"P\u00e1gina web"}},"canPublishScriptToAnyone":true,"user":{"keyboardShortcuts":true,"sessionIndex":"","onePickToken":"","guest_":true,"displayNameOrEmail":"guest","userName":"guest","uid":"","renderMobile":false,"domain":"","namespace":"","hasWriteAccess":false,"namespaceUser":false,"primaryEmail":"guest","hasAdminAccess":false},"gadgets":{"baseUri":"/site/wayneholder/system/app/pages/gadgets"}};
  webspace.page.breadcrumbs = breadcrumbs;

  
  var JOT_siteRelTimeStrs = ["a minute ago","__duration__ minutes ago","an hour ago","__duration__ hours ago"];

</script>
<script type="text/javascript">
                window.jstiming.load.tick('scl');
              </script>
<style type="text/css">
</style>
<link rel="stylesheet" type="text/css" href="keyplexlib-wayneplexing-on-arduino-made-easy%20Archivos/standard-css-simple-ltr-ltr.css">
<link rel="stylesheet" type="text/css" href="keyplexlib-wayneplexing-on-arduino-made-easy%20Archivos/overlay.css">
<link rel="stylesheet" type="text/css" href="keyplexlib-wayneplexing-on-arduino-made-easy%20Archivos/allthemes-view.css">
<!--[if IE]>
          <link rel="stylesheet" type="text/css" href="/site/wayneholder/system/app/css/camelot/allthemes%2die.css" />
        <![endif]-->
<script type="text/javascript">
                window.jstiming.load.tick('cl');
              </script>
<script src="keyplexlib-wayneplexing-on-arduino-made-easy%20Archivos/ga.js"></script><script src="keyplexlib-wayneplexing-on-arduino-made-easy%20Archivos/element.js"></script><link type="text/css" rel="stylesheet" charset="UTF-8" href="keyplexlib-wayneplexing-on-arduino-made-easy%20Archivos/translateelement.css"><script type="text/javascript" charset="UTF-8" src="keyplexlib-wayneplexing-on-arduino-made-easy%20Archivos/main_es.js"></script><script type="text/javascript" charset="UTF-8" src="keyplexlib-wayneplexing-on-arduino-made-easy%20Archivos/element_main.js"></script><style>.goog-te-ftab-float {z-index:9999999; overflow:visible; position:fixed; _position:absolute;top:auto;left:auto;bottom:0px; _top:expression((-0-document.getElementById('\3a 0.floatContainer').offsetHeight+(hack3=document.documentElement.clientHeight||document.body.clientHeight)+(hack4=document.documentElement.scrollTop||document.body.scrollTop))+'px');right:20px; _left:expression((-20-document.getElementById('\3a 0.floatContainer').offsetWidth+(hack5=document.documentElement.clientWidth||document.body.clientWidth)+(hack6=document.documentElement.scrollLeft||document.body.scrollLeft))+'px');}</style></head>
<body xmlns="http://www.google.com/ns/jotspot" id="body" class="en" style="background-color: rgb(255, 255, 255); position: relative; min-height: 100%; top: 0px;">
<div id="sites-chrome-everything" style="direction:ltr">
<div id="sites-chrome-main-wrapper">
<table id="sites-chrome-main" class="sites-layout-hbox" cellspacing="0">
<tbody><tr>
<td id="sites-canvas" style="border: none;">
<div xmlns="http://www.w3.org/1999/xhtml" id="title-crumbs" style="">
</div>
<h3 xmlns="http://www.w3.org/1999/xhtml" id="sites-page-title-header" style="" align="left">
<span id="sites-page-title" dir="ltr" tabindex="-1" style="outline: none">Introducing KeyPlexLib (or, 'Wayneplexing' on Arduino Made Easy)</span>
</h3>
<div class="sites-canvas-main">
<div id="sites-canvas-main-content">
<table xmlns="http://www.w3.org/1999/xhtml" class="sites-layout-name-one-column sites-layout-hbox" cellspacing="0"><tbody><tr><td class="sites-layout-tile sites-tile-name-content-1"><div dir="ltr"><div style="text-align:left"><font size="3"><div><div class="sites-embed-align-center-wrapping-off"><div class="sites-embed-border-off sites-embed" style="width:640px;"><div class="sites-embed-content sites-embed-type-youtube"><iframe title="YouTube video player" class="youtube-player" type="text/html" src="keyplexlib-wayneplexing-on-arduino-made-easy%20Archivos/HFvuCwLvLys.htm" allowfullscreen="true" width="640" height="360" frameborder="0"></iframe></div></div></div></div><br></font></div><div style="text-align:left"><font size="3">In a previous article,&nbsp;<a href="https://sites.google.com/site/wayneholder/wayneplexing-buttons">WaynePlexing Push Buttons (or, read 6 buttons using only 3 I/O pins)</a>, I introduced a technique for connecting more input buttons to an Arduino than you'd normally think possible. &nbsp;<span style="background-color:transparent;text-align:center">I shamelessly named this technique "Wayneplexing" after the "<a href="https://en.wikipedia.org/wiki/Charlieplexing" target="_blank" rel="nofollow">Charlieplexing</a>" technique that's sometimes used with LEDs .</span><span style="background-color:transparent">&nbsp; And, in a later article,&nbsp;</span><a href="https://sites.google.com/site/wayneholder/key-input-library-for-arduino">Key Input Library for Arduino</a><span style="background-color:transparent">, I described my </span><font face="courier new, monospace"><b>KeyLib2</b></font><span style="background-color:transparent">
 Arduino library that helps you easily connect pushbuttons by handling 
all the steps needed to scan, debounce and read inputs from each 
pushbutton key.</span></font></div><div><font size="3"><br></font></div><div><div style="text-align:left"><font size="3"><span style="background-color:transparent">This article extends&nbsp;</span><b style="font-family:courier new,monospace">KeyLib2</b><span style="background-color:transparent">&nbsp;to create a new Arduino library&nbsp;</span><font face="courier new, monospace"><b>KeyPLexLib</b></font><span style="background-color:transparent">&nbsp;(download
 link at bottom of this page)&nbsp;that works as before, but also adds 
support for Wayneplexing of pushbuttons. &nbsp;In addition,&nbsp;</span><b style="font-family:courier new,monospace">KeyPLexLib</b><span style="background-color:transparent">&nbsp;adds the ability to define interrupt-like </span><i>callbacks</i><span style="background-color:transparent"> which report when individual pushbuttons are both pressed and released. &nbsp;</span><span style="background-color:transparent">The API for&nbsp;<font face="courier new, monospace"><b>KeyPLexLib</b></font>&nbsp;is the same as for&nbsp;</span><b style="font-family:courier new,monospace">KeyLib2</b><span style="background-color:transparent">, with the addition of the following new functions,&nbsp;</span><font face="courier new, monospace"><b>scanPlexKeys()</b></font><span style="background-color:transparent">,&nbsp;</span><font face="courier new, monospace"><b>getPinCount()</b></font><span style="background-color:transparent"> and&nbsp;</span><font face="courier new, monospace"><b>setCallback()</b></font><span style="background-color:transparent">. &nbsp;</span><span style="background-color:transparent">The library includes two example programs,&nbsp;</span><font face="courier new, monospace"><b>DirectDemo</b></font><span style="background-color:transparent">&nbsp;and&nbsp;</span><b style="font-family:courier new,monospace">Callback</b><font face="courier new, monospace"><b>Demo</b></font><span style="background-color:transparent">, that demonstrate the available features. &nbsp;The demo programs are designed to work</span><span style="background-color:transparent">&nbsp;with the following circuit:</span></font></div><div style="text-align:left"><font size="3"><span style="background-color:transparent"><br></span></font></div><div style="text-align:left"><span style="background-color:transparent"><div style="display:block;text-align:center;margin-right:auto;margin-left:auto"><a href="https://sites.google.com/site/wayneholder/keyplexlib-wayneplexing-on-arduino-made-easy/KeyPlexLib-Demo.png?attredirects=0" imageanchor="1"><img src="keyplexlib-wayneplexing-on-arduino-made-easy%20Archivos/KeyPlexLib-Demo.png" width="400" height="374" border="0"></a></div></span></div><div><div></div><div><div style="display:block;text-align:center;margin-right:auto;margin-left:auto"><div style="display:block;text-align:center;margin-right:auto;margin-left:auto"><font size="3">Figure 1 - Click for larger view</font></div><br></div><div style="text-align:left;display:block;margin-right:auto;margin-left:auto"><font size="3">Here's an Arduino sketch that shows how simple it is to use <font face="courier new, monospace"><b>KeyPlexLib</b></font>&nbsp;to scan 6 pushbuttons using only 3 I/O pins:</font></div><div style="text-align:left;display:block;margin-right:auto;margin-left:auto"><font size="3"><br></font></div></div></div></div><blockquote style="margin:0 0 0 40px;border:none;padding:0px"><div><div><div><div style="text-align:left;display:block;margin-right:auto;margin-left:auto"><div style="margin-right:auto;margin-left:auto"><code><font size="4">#include &lt;KeyPlexLib.h&gt;</font></code></div></div></div></div></div><div><div style="text-align:left;display:block;margin-right:auto;margin-left:auto"><div style="margin-right:auto;margin-left:auto"><font size="4"><br></font></div></div></div><div><div style="text-align:left;display:block;margin-right:auto;margin-left:auto"><div style="margin-right:auto;margin-left:auto"><code><font size="4">KeyPlexLib buttons(3, 2, 3, 4);</font></code></div></div></div><div><div style="text-align:left;display:block;margin-right:auto;margin-left:auto"><div style="margin-right:auto;margin-left:auto"><font size="4"><br></font></div></div></div><div><div style="text-align:left;display:block;margin-right:auto;margin-left:auto"><div style="margin-right:auto;margin-left:auto"><code><font size="4">void setup () {</font></code></div></div></div><div><div style="text-align:left;display:block;margin-right:auto;margin-left:auto"><div style="margin-right:auto;margin-left:auto"><code><font size="4">&nbsp; buttons.scanPlexKeys(true);</font></code></div></div></div><div><div style="text-align:left;display:block;margin-right:auto;margin-left:auto"><div style="margin-right:auto;margin-left:auto"><code><font size="4">&nbsp; Serial.begin(115200);</font></code></div></div></div><div><div style="text-align:left;display:block;margin-right:auto;margin-left:auto"><div style="margin-right:auto;margin-left:auto"><code><font size="4">&nbsp; while (!Serial) {</font></code></div></div></div><div><div style="text-align:left;display:block;margin-right:auto;margin-left:auto"><div style="margin-right:auto;margin-left:auto"><code><font size="4">&nbsp; &nbsp; ; // wait for serial port to connect. Needed for native USB</font></code></div></div></div><div><div style="text-align:left;display:block;margin-right:auto;margin-left:auto"><div style="margin-right:auto;margin-left:auto"><code><font size="4">&nbsp; }</font></code></div></div></div><div><div style="text-align:left;display:block;margin-right:auto;margin-left:auto"><div style="margin-right:auto;margin-left:auto"><code><font size="4">&nbsp; Serial.println("Ready");</font></code></div></div></div><div><div style="text-align:left;display:block;margin-right:auto;margin-left:auto"><div style="margin-right:auto;margin-left:auto"><code><font size="4">}</font></code></div></div></div><div><div style="text-align:left;display:block;margin-right:auto;margin-left:auto"><div style="margin-right:auto;margin-left:auto"><font size="4"><br></font></div></div></div><div><div style="text-align:left;display:block;margin-right:auto;margin-left:auto"><div style="margin-right:auto;margin-left:auto"><code><font size="4">void loop () {</font></code></div></div></div><div><div style="text-align:left;display:block;margin-right:auto;margin-left:auto"><div style="margin-right:auto;margin-left:auto"><code><font size="4">&nbsp; if (buttons.keyAvailable()) {</font></code></div></div></div><div><div style="text-align:left;display:block;margin-right:auto;margin-left:auto"><div style="margin-right:auto;margin-left:auto"><code><font size="4">&nbsp; &nbsp; byte idx = buttons.getKeyIndex();</font></code></div></div></div><div><div style="text-align:left;display:block;margin-right:auto;margin-left:auto"><div style="margin-right:auto;margin-left:auto"><code><font size="4">&nbsp; &nbsp; Serial.print("Pressed key ");</font></code></div></div></div><div><div style="text-align:left;display:block;margin-right:auto;margin-left:auto"><div style="margin-right:auto;margin-left:auto"><code><font size="4">&nbsp; &nbsp; Serial.println(idx, DEC);</font></code></div></div></div><div><div style="text-align:left;display:block;margin-right:auto;margin-left:auto"><div style="margin-right:auto;margin-left:auto"><code><font size="4">&nbsp; }</font></code></div></div></div><div><div style="text-align:left;display:block;margin-right:auto;margin-left:auto"><div style="margin-right:auto;margin-left:auto"><code><font size="4">}</font></code></div></div></div></blockquote><div><div style="text-align:left;display:block;margin-right:auto;margin-left:auto"><div><br></div></div><div style="text-align:left;display:block;margin-right:auto;margin-left:auto"><font size="4"><b>Wiring Wayneplexed Keys</b></font></div><div style="text-align:left;display:block;margin-right:auto;margin-left:auto"><font size="1"><br></font></div><div style="text-align:left;display:block;margin-right:auto;margin-left:auto"><font size="3">One
 way to visualize how to connect all the&nbsp;pushbuttons when using 
Wayneplexing is to draw a regular polygon which has the same&nbsp;number
 of&nbsp;vertices as the number of I/O pins. &nbsp;Then, 
for&nbsp;polygons with more than 3&nbsp;sides, draw in additional lines 
to connect all vertices to each other. &nbsp;These&nbsp;lines 
represent&nbsp;where Wayneplexed pushbuttons can go. &nbsp;For example, 
if you draw a square and then add the two diagonal lines needed to 
connect one&nbsp;corner to&nbsp;another, you'll have 6 lines that show 
where Wayneplexed pushbuttons can connect. &nbsp;Then, you add one 
pushbutton from each of the 4 vertices (I/O pins) to ground to&nbsp;get a
 total of 10&nbsp;</font><span style="font-size:medium;background-color:transparent">pushbuttons that can be scanned using only 4 I/O pins. &nbsp;The&nbsp;</span><font size="3">following
 diagram shows the connections for 4 I/O pins in schematic form where 
each pushbutton is labelled with the index value that will be returned 
by <font face="courier new, monospace"><b>getKeyIndex()</b></font> when that pushbutton is pressed.</font></div><div style="text-align:left;display:block;margin-right:auto;margin-left:auto"><span style="font-size:medium;background-color:transparent"><br></span></div><div style="text-align:left;display:block;margin-right:auto;margin-left:auto"><span style="font-size:medium;background-color:transparent"><div style="display:block;text-align:center;margin-right:auto;margin-left:auto"><a href="https://sites.google.com/site/wayneholder/keyplexlib-wayneplexing-on-arduino-made-easy/Wayneplexing-4-Pin.png?attredirects=0" imageanchor="1"><img src="keyplexlib-wayneplexing-on-arduino-made-easy%20Archivos/Wayneplexing-4-Pin.png" width="400" height="352" border="0"></a></div><div style="display:block;text-align:center;margin-right:auto;margin-left:auto">Figure 2 - Click image for a larger view</div><br></span></div><div style="text-align:left;display:block;margin-right:auto;margin-left:auto"><font size="3">For
 more, or less pushbuttons you can use&nbsp;the&nbsp;following formula 
to calculate the number of pushbuttons you can connect to 'n' I/O pins 
using Wayneplexing:</font></div><div style="text-align:left;display:block;margin-right:auto;margin-left:auto"><font size="3"><br></font></div></div><blockquote style="margin:0 0 0 40px;border:none;padding:0px"><blockquote style="margin:0 0 0 40px;border:none;padding:0px"><div style="text-align:left;display:block;margin-right:auto;margin-left:auto"><font size="5">pushbuttons = (n * (n - 1) / 2 + n</font></div></blockquote></blockquote><div><div><div><div style="text-align:left;display:block;margin-right:auto;margin-left:auto"><font size="3"><br></font></div><div style="text-align:left;display:block;margin-right:auto;margin-left:auto"><font size="3">or use the following table to lookup values for typical uses:</font></div><div style="text-align:left;display:block;margin-right:auto;margin-left:auto"><font size="3"><br></font></div></div></div></div><blockquote style="margin:0 0 0 40px;border:none;padding:0px"><blockquote style="margin:0 0 0 40px;border:none;padding:0px"><div style="text-align:left;display:block;margin-right:auto;margin-left:auto"><font size="3"><table style="border-collapse:collapse;border-color:rgb(136,136,136);border-width:1px" cellspacing="0" bordercolor="#888" border="1"><tbody><tr><td style="text-align:center;width:98px;height:19px">Pins</td><td style="text-align:center;width:81px;height:19px">Buttons</td></tr><tr><td style="text-align:center;width:98px;height:19px">2</td><td style="text-align:center;width:81px;height:19px">3</td></tr><tr><td style="text-align:center;width:98px;height:19px">3</td><td style="text-align:center;width:81px;height:19px">6</td></tr><tr><td style="text-align:center;width:98px;height:19px">4</td><td style="text-align:center;width:81px;height:19px">10</td></tr><tr><td style="text-align:center;width:98px;height:19px">5</td><td style="text-align:center;width:81px;height:19px">15</td></tr><tr><td style="text-align:center;width:98px;height:19px">6</td><td style="text-align:center;width:81px;height:19px">21</td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">28</td></tr></tbody></table><br></font></div></blockquote></blockquote><div><div style="text-align:left;display:block;margin-right:auto;margin-left:auto"><br></div><div style="text-align:left;display:block;margin-right:auto;margin-left:auto"><font size="4"><b>Key Index Numbering</b></font></div><div style="text-align:left;display:block;margin-right:auto;margin-left:auto"><b><font size="1"><br></font></b></div><div style="text-align:left;display:block;margin-right:auto;margin-left:auto"><font size="3">The way the index numbers returned from a call <font face="courier new, monospace"><b>getKeyIndex()</b></font>
 may seem a bit odd, but you can use a simple diagram to figure it out. 
&nbsp;For example, for the 4 pin, 10 pushbutton 
configuration&nbsp;shown&nbsp;in Figure 2, you would start by making a 
chart like the one shown below:</font></div><div style="text-align:left;display:block;margin-right:auto;margin-left:auto"><font size="3"><br></font></div></div><blockquote style="margin:0 0 0 40px;border:none;padding:0px"><blockquote style="margin:0 0 0 40px;border:none;padding:0px"><div style="text-align:left;display:block;margin-right:auto;margin-left:auto"><font size="3"><table style="text-align:center;border-collapse:collapse;border-color:rgb(136,136,136);border-width:1px" cellspacing="0" bordercolor="#888" border="1"><tbody><tr><td style="width:60px">Pin 5</td><td style="width:60px">3</td><td style="width:60px">6</td><td style="width:60px">8</td><td style="width:60px">9</td></tr><tr><td style="width:60px">Pin 4</td><td style="width:60px">2</td><td style="width:60px">5</td><td style="width:60px">7</td><td style="width:60px"><br></td></tr><tr><td style="width:60px">Pin 3</td><td style="width:60px">1</td><td style="width:60px">4</td><td style="width:60px"><br></td><td style="width:60px"><br></td></tr><tr><td style="width:60px">Pin 2</td><td style="width:60px">0</td><td style="width:60px"><br></td><td style="width:60px"><br></td><td style="width:60px"><br></td></tr><tr><td style="width:60px"><br></td><td style="width:60px">Gnd</td><td style="width:60px">Pin 2</td><td style="width:60px">Pin 3</td><td style="width:60px">Pin 4</td></tr></tbody></table></font><b>Index values for 4 I/O pins (2-5) and 10 Pushbuttons</b></div></blockquote></blockquote><font size="3"><div style="text-align:left"><br></div><div style="text-align:left">Notice
 how the left column and the bottom row are labelled with left column 
being labelled with the I/O pin numbers listed from the bottom up in the
 same order they were passed to the <font face="courier new, monospace"><b>KeyPlexLib</b></font>
 constructor. &nbsp;The bottom row starts with a column for the 
ground-connected pins followed by the I/O pins which are also listed in 
the same order as they were passed to the constructor. &nbsp;However 
&nbsp;the last pin assigned is omitted from the row. &nbsp;Then, some of
 the remaining cells are labelled in the pattern shown. &nbsp;Using this
 diagram you can figure out the index code for any switch combination by
 selecting as an number and then tracing left and down to see the I/O 
pins connect to the switch that will return this number when pressed. 
&nbsp;For example, index 7 is return when the pushbutton connecting pins
 3 &amp; 4 is pressed. &nbsp;Here some additional examples:</div><div style="text-align:left"><br></div><div style="text-align:left"><br></div></font><blockquote style="margin:0 0 0 40px;border:none;padding:0px"><blockquote style="margin:0 0 0 40px;border:none;padding:0px"><div style="text-align:left"><table style="font-size:medium;border-collapse:collapse;border-color:rgb(136,136,136);border-width:1px" cellspacing="0" bordercolor="#888" border="1"><tbody><tr><td style="text-align:center;width:60px">Pin 6</td><td style="text-align:center;width:60px">4</td><td style="text-align:center;width:60px">&nbsp;8</td><td style="text-align:center;width:60px">&nbsp;11</td><td style="text-align:center;width:60px">&nbsp;13</td><td style="text-align:center;width:60px">14</td></tr><tr><td style="text-align:center;width:60px">Pin 5</td><td style="text-align:center;width:60px">3</td><td style="text-align:center;width:60px">7</td><td style="text-align:center;width:60px">10&nbsp;</td><td style="text-align:center;width:60px">12&nbsp;</td><td style="text-align:center;width:60px">&nbsp;</td></tr><tr><td style="text-align:center;width:60px">Pin 4</td><td style="text-align:center;width:60px">2</td><td style="text-align:center;width:60px">6&nbsp;</td><td style="text-align:center;width:60px">9</td><td style="text-align:center;width:60px">&nbsp;</td><td style="text-align:center;width:60px">&nbsp;</td></tr><tr><td style="text-align:center;width:60px">Pin 3</td><td style="text-align:center;width:60px">&nbsp;1</td><td style="text-align:center;width:60px">5</td><td style="text-align:center;width:60px">&nbsp;</td><td style="text-align:center;width:60px">&nbsp;</td><td style="text-align:center;width:60px">&nbsp;</td></tr><tr><td style="text-align:center;width:60px">Pin 2</td><td style="text-align:center;width:60px">0</td><td style="text-align:center;width:60px">&nbsp;</td><td style="text-align:center;width:60px">&nbsp;</td><td style="text-align:center;width:60px">&nbsp;</td><td style="text-align:center;width:60px">&nbsp;</td></tr><tr><td style="text-align:center;width:60px">&nbsp;</td><td style="text-align:center;width:60px">Gnd&nbsp;</td><td style="text-align:center;width:60px">Pin 2&nbsp;</td><td style="text-align:center;width:60px">Pin 3</td><td style="text-align:center;width:60px">Pin 4</td><td style="text-align:center;width:60px">Pin 5</td></tr></tbody></table><b><font size="2">Index values for 5 I/O pins (2-6) and 15 Pushbuttons</font></b></div></blockquote></blockquote><div style="text-align:left"><br></div><div style="font-size:medium;text-align:left"><br></div><blockquote style="margin:0 0 0 40px;border:none;padding:0px"><blockquote style="margin:0 0 0 40px;border:none;padding:0px"><font size="3"><div style="text-align:left"><table style="border-collapse:collapse;border-color:rgb(136,136,136);border-width:1px" cellspacing="0" bordercolor="#888" border="1"><tbody><tr><td style="text-align:center;width:60px">Pin 7</td><td style="text-align:center;width:60px">5</td><td style="text-align:center;width:60px">10</td><td style="text-align:center;width:60px">14</td><td style="text-align:center;width:60px">17</td><td style="text-align:center;width:60px">19&nbsp;</td><td style="text-align:center;width:60px">20</td></tr><tr><td style="text-align:center;width:60px">Pin&nbsp;6</td><td style="text-align:center;width:60px">4</td><td style="text-align:center;width:60px">9</td><td style="text-align:center;width:60px">13</td><td style="text-align:center;width:60px">16</td><td style="text-align:center;width:60px">18</td><td style="text-align:center;width:60px"><br></td></tr><tr><td style="text-align:center;width:60px">Pin&nbsp;5</td><td style="text-align:center;width:60px">3</td><td style="text-align:center;width:60px">8</td><td style="text-align:center;width:60px">12&nbsp;</td><td style="text-align:center;width:60px">15</td><td style="text-align:center;width:60px"><br></td><td style="text-align:center;width:60px"><br></td></tr><tr><td style="text-align:center;width:60px">Pin&nbsp;4</td><td style="text-align:center;width:60px">2</td><td style="text-align:center;width:60px">7</td><td style="text-align:center;width:60px">11</td><td style="text-align:center;width:60px"><br></td><td style="text-align:center;width:60px"><br></td><td style="text-align:center;width:60px"><br></td></tr><tr><td style="text-align:center;width:60px">Pin&nbsp;3</td><td style="text-align:center;width:60px">1</td><td style="text-align:center;width:60px">6</td><td style="text-align:center;width:60px">&nbsp;</td><td style="text-align:center;width:60px">&nbsp;</td><td style="text-align:center;width:60px">&nbsp;</td><td style="text-align:center;width:60px">&nbsp;</td></tr><tr><td style="text-align:center;width:60px">Pin&nbsp;2</td><td style="text-align:center;width:60px">0</td><td style="text-align:center;width:60px"><br></td><td style="text-align:center;width:60px"><br></td><td style="text-align:center;width:60px"><br></td><td style="text-align:center;width:60px"><br></td><td style="text-align:center;width:60px">&nbsp;</td></tr><tr><td style="text-align:center;width:60px"><br></td><td style="text-align:center;width:60px">Gnd</td><td style="text-align:center;width:60px">Pin&nbsp;2</td><td style="text-align:center;width:60px">Pin&nbsp;3</td><td style="text-align:center;width:60px">Pin&nbsp;4</td><td style="text-align:center;width:60px">Pin&nbsp;5</td><td style="text-align:center;width:60px">&nbsp;Pin&nbsp;<span style="background-color:transparent">6</span></td></tr></tbody></table></div></font></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px"><blockquote style="margin:0 0 0 40px;border:none;padding:0px"><div style="text-align:left"><font size="2"><b>Index values for 6 I/O pins (2-7) and 21 Pushbuttons</b><br></font><br></div><div style="font-size:medium;text-align:left"><br></div><div style="text-align:left"><table style="font-size:medium;border-collapse:collapse;border-color:rgb(136,136,136);border-width:1px" cellspacing="0" bordercolor="#888" border="1"><tbody><tr><td style="text-align:center;width:60px">Pin 8</td><td style="text-align:center;width:60px">6</td><td style="text-align:center;width:60px">&nbsp;12</td><td style="text-align:center;width:60px">17</td><td style="text-align:center;width:60px">21</td><td style="text-align:center;width:60px">&nbsp;24</td><td style="text-align:center;width:60px">26&nbsp;</td><td style="text-align:center;width:60px">27</td></tr><tr><td style="text-align:center;width:60px">Pin 7</td><td style="text-align:center;width:60px">5</td><td style="text-align:center;width:60px">11</td><td style="text-align:center;width:60px">16</td><td style="text-align:center;width:60px">20</td><td style="text-align:center;width:60px">23&nbsp;</td><td style="text-align:center;width:60px">25</td><td style="text-align:center;width:60px">&nbsp;</td></tr><tr><td style="text-align:center;width:60px">Pin 6</td><td style="text-align:center;width:60px">4</td><td style="text-align:center;width:60px">&nbsp;10</td><td style="text-align:center;width:60px">15</td><td style="text-align:center;width:60px">19</td><td style="text-align:center;width:60px">22&nbsp;</td><td style="text-align:center;width:60px">&nbsp;</td><td style="text-align:center;width:60px">&nbsp;</td></tr><tr><td style="text-align:center;width:60px">Pin 5</td><td style="text-align:center;width:60px">3</td><td style="text-align:center;width:60px">9</td><td style="text-align:center;width:60px">14</td><td style="text-align:center;width:60px">18</td><td style="text-align:center;width:60px">&nbsp;</td><td style="text-align:center;width:60px">&nbsp;</td><td style="text-align:center;width:60px">&nbsp;</td></tr><tr><td style="text-align:center;width:60px">Pin 4</td><td style="text-align:center;width:60px">2</td><td style="text-align:center;width:60px">8</td><td style="text-align:center;width:60px">13&nbsp;</td><td style="text-align:center;width:60px">&nbsp;</td><td style="text-align:center;width:60px">&nbsp;</td><td style="text-align:center;width:60px">&nbsp;</td><td style="text-align:center;width:60px">&nbsp;</td></tr><tr><td style="text-align:center;width:60px">Pin 3</td><td style="text-align:center;width:60px">1</td><td style="text-align:center;width:60px">7</td><td style="text-align:center;width:60px"><br></td><td style="text-align:center;width:60px">&nbsp;</td><td style="text-align:center;width:60px">&nbsp;</td><td style="text-align:center;width:60px">&nbsp;</td><td style="text-align:center;width:60px">&nbsp;</td></tr><tr><td style="text-align:center;width:60px">Pin 2</td><td style="text-align:center;width:60px">0</td><td style="text-align:center;width:60px">&nbsp;</td><td style="text-align:center;width:60px">&nbsp;</td><td style="text-align:center;width:60px">&nbsp;</td><td style="text-align:center;width:60px">&nbsp;</td><td style="text-align:center;width:60px">&nbsp;</td><td style="text-align:center;width:60px">&nbsp;</td></tr><tr><td style="text-align:center;width:60px">&nbsp;</td><td style="text-align:center;width:60px">Gnd&nbsp;</td><td style="text-align:center;width:60px">Pin 2</td><td style="text-align:center;width:60px">Pin 3</td><td style="text-align:center;width:60px">Pin 4</td><td style="text-align:center;width:60px">Pin 5</td><td style="text-align:center;width:60px">Pin 6</td><td style="text-align:center;width:60px">Pin 7</td></tr></tbody></table><b><font size="2">Index values for 7 I/O pins (2-8) and 28 Pushbuttons</font></b></div><div style="font-size:medium;text-align:left"><br></div></blockquote></blockquote><font size="3"><div style="text-align:left">The example sketch <font face="courier new, monospace"><b>DirectDemo</b></font>, which is included in the <font face="courier new, monospace"><b>KeyPlexLib.zip</b></font>
 file you can download below, includes code that enumerates the same 
assignments you can get from the charts like the ones shown above, but 
using the actual pin values assigned in the constructor. &nbsp;This is 
an alternate method you can use to determine the index to pushbutton 
assignments. &nbsp;However, if you use any of the Arduino analog pins A0
 - A5, be aware that the example sketch will print back these pins as 
values 14 - 19, respectively.</div></font><div><div style="text-align:left;display:block;margin-right:auto;margin-left:auto"><b><font size="3"><br></font></b></div><div style="text-align:left;display:block;margin-right:auto;margin-left:auto"><font size="4"><b>Wayneplexing is Different from Conventional Keyboard Multiplexing</b></font></div><div style="text-align:left;display:block;margin-right:auto;margin-left:auto"><font size="1"><br></font></div><div style="text-align:left;display:block;margin-right:auto;margin-left:auto"><font size="3">Many
 embedded systems use matrix-based multiplexing to connect an array of 
pushbuttons to I/O pins. &nbsp;The following schematic shows a typical 
way this is done using a 3x4, numeric keypad as an example:</font></div><div style="text-align:center;display:block;margin-right:auto;margin-left:auto"><font size="3"><br></font></div><div style="text-align:left;display:block;margin-right:auto;margin-left:auto"><font size="3"><div style="display:block;text-align:center;margin-right:auto;margin-left:auto"><a href="https://sites.google.com/site/wayneholder/keyplexlib-wayneplexing-on-arduino-made-easy/Multiplex-3x4.png?attredirects=0" imageanchor="1"><img src="keyplexlib-wayneplexing-on-arduino-made-easy%20Archivos/Multiplex-3x4.png" width="299" height="400" border="0"></a></div><div style="display:block;text-align:center;margin-right:auto;margin-left:auto">Figure 3 - Click image for larger view</div><div style="text-align:center;display:block;margin-right:auto;margin-left:auto"><font size="3"><br></font></div><div style="text-align:left"><span style="background-color:transparent">While
 logical and orderly, this&nbsp;approach wastes the full potential of 
the I/O pins. &nbsp;With Wayneplexing, the same 7 I/O&nbsp;pins could be
 used to scan 28 pushbuttons instead of only 12... &nbsp;While&nbsp;this
 would not be&nbsp;practical because Wayneplexing does not support </span><a href="https://en.wikipedia.org/wiki/Rollover_(key)" target="_blank" rel="nofollow">rollover</a><span style="background-color:transparent">, 28 keys could, in theory, let you implement a QUERTY-style keyboard, complete with a spacebar and an enter key.</span></div><div style="text-align:left"><span style="background-color:transparent"><br></span></div><div style="text-align:left">Note:
 it's certainly possible that this technique has been invented before 
and documented somewhere but, other than one web article with broken 
links to circuit diagrams, I haven't yet found any information on it. 
&nbsp;I think it's a valuable technique, so I've taken the time to code 
and write <font face="courier new, monospace"><b>KeyPlexLib</b></font> 
for use on Arduino,as well try to document all the details on this web 
page in the hopes that this enable others to benefit. &nbsp;If it 
offends you, you don't have to call it "Wayneplexing," though. 
&nbsp;This is one of the reasons I chose to name the library&nbsp;<b style="font-family:courier new,monospace">KeyPlexLib</b><font face="verdana, sans-serif">
 and not WaynePlexLib and to not encumber the API with similar names 
(although I refer to it as Waynepexing in the library's source code 
comments.) &nbsp;If you're aware of any&nbsp;prior art on&nbsp;this 
topic, please let me know at wayne dot holder 
at&nbsp;googly-eyed-company's-well-known-email-service dot com.</font></div></font></div><div style="text-align:left;display:block;margin-right:auto;margin-left:auto"><font size="3"><br></font></div><div style="text-align:left;display:block;margin-right:auto;margin-left:auto"><font size="4"><b>Practical Considerations and Limitations</b></font></div><div style="text-align:left;display:block;margin-right:auto;margin-left:auto"><font size="1"><br></font></div><div style="text-align:left;display:block;margin-right:auto;margin-left:auto"><font size="3"><span style="background-color:transparent">Like <font face="courier new, monospace"><b>KeyLib2</b></font>,&nbsp;</span><span style="background-color:transparent;text-align:center"><font face="courier new, monospace"><b>KeyPlexLib</b></font></span><span style="background-color:transparent">&nbsp;supports
 chording&nbsp;&nbsp;(pressing and holding multiple pushbuttons at the 
same time) but only with pushbuttons that connect from an I/O pin to 
ground and only as long as Wayneplexing has not been enabled by 
calling&nbsp;</span></font><span style="background-color:transparent;text-align:center"><font size="3"><font face="courier new, monospace"><b>scanPlexKeys(true)</b></font>.
 &nbsp;If you enable Wayneplexing, you'll only be&nbsp;able to press one
 pushbutton at a time. &nbsp;This is not a big problem for many 
applications, but&nbsp;</font></span><font size="3">there are cases 
where inadvertently pressing a pushbutton&nbsp;before the previous one 
has been release can&nbsp;result in missing the second&nbsp;pushbutton 
press.</font></div><div style="text-align:left;display:block;margin-right:auto;margin-left:auto"><font size="3"><span style="background-color:transparent"><br></span></font></div><div style="text-align:left;display:block;margin-right:auto;margin-left:auto"><font size="3"><span style="background-color:transparent">If
 you have a lot of I/O pins available, Wayneplexing may not offer much 
to your design. &nbsp;However, it can be a real lifesaver when working 
with&nbsp;micro controllers&nbsp;like the ATtiny85 that can have fewer 
than 6 I/O pins available. &nbsp;For example, here's a small PCB I built
 as a test device that uses an ATtiny10 (which has only 4 I/O pins) to 
implement a 6 button keyboard that outputs a 9600 baud, numeric ASCII 
serial code for each key press. &nbsp;</span></font></div><div style="text-align:left;display:block;margin-right:auto;margin-left:auto"><font size="3"><span style="background-color:transparent"><br></span></font></div><div style="text-align:left;display:block;margin-right:auto;margin-left:auto"><font size="3"><span style="background-color:transparent"><div style="text-align:center;display:block;margin-right:auto;margin-left:auto"><a href="https://sites.google.com/site/wayneholder/keyplexlib-wayneplexing-on-arduino-made-easy/i.png?attredirects=0" imageanchor="1"><img src="keyplexlib-wayneplexing-on-arduino-made-easy%20Archivos/i.png" width="400" height="82" border="0"></a></div><div style="text-align:center;display:block;margin-right:auto;margin-left:auto">Figure 4 - Click image for larger view</div><div style="text-align:left"><span style="background-color:transparent">&nbsp;</span></div></span></font></div><div style="text-align:left;display:block;margin-right:auto;margin-left:auto"><br></div><div style="display:block;text-align:center;margin-right:auto;margin-left:auto"><div style="text-align:left"><font size="4"><b>The Library API (for Arduino)</b></font></div><div style="text-align:left"><font size="1"><br></font></div><div style="text-align:left"><font size="3" face="verdana, sans-serif">Note: for&nbsp;efficiency and&nbsp;portability, this library use the types&nbsp;</font><span style="text-align:center;background-color:transparent"><font size="3" face="verdana, sans-serif"><i><b>uint8_t</b></i>&nbsp;&nbsp;and&nbsp;<i><b>bool</b></i>, which are&nbsp;</font></span><span style="font-family:verdana,sans-serif;font-size:medium;background-color:transparent">defined in the header file&nbsp;</span><span style="font-size:medium;background-color:transparent"><font face="courier new, monospace"><b>inttypes.h</b></font></span><span style="font-family:verdana,sans-serif;font-size:medium;background-color:transparent">. &nbsp;If you're&nbsp;</span><font size="3" face="verdana, sans-serif">unfamiliar with these types, just&nbsp;pretend they are type </font><font size="3" face="courier new, monospace"><b>byte</b></font><font size="3" face="verdana, sans-serif">, or&nbsp;</font><font size="3" face="courier new, monospace"><b>int</b></font><font size="3" face="verdana, sans-serif">.</font></div><div style="text-align:left"><font size="4" face="courier new, monospace"><b><br></b></font></div><div style="text-align:left"><b><font size="5" face="courier new, monospace"><code>KeyPlexLib (uint8_t&nbsp;numKeys,&nbsp;uint8_t&nbsp;...)</code></font></b></div><div style="text-align:left"><b><font size="1" face="courier new, monospace"><br></font></b></div><div style="text-align:left"><font size="3" face="verdana, sans-serif"><span>&nbsp; &nbsp; This is the c</span>onstructor for the&nbsp;</font><b style="font-size:10pt"><font size="4" face="courier new, monospace">KeyPlexLib</font></b><font size="3" face="verdana, sans-serif">&nbsp;library. &nbsp;It should be declared as a global variable, like this:</font></div><div style="text-align:left"><font size="1" face="verdana, sans-serif"><br></font></div></div></div><blockquote style="margin:0 0 0 40px;border:none;padding:0px"><div><div><div><div style="display:block;text-align:center;margin-right:auto;margin-left:auto"><blockquote style="text-align:left;margin:0px 0px 0px 40px;border:none;padding:0px"><font size="4"><b><font face="courier new, monospace"><code>KeyPlexLib&nbsp;</code></font><span style="font-family:courier new,monospace"><code>buttons(3, 2, 3, 4);</code></span></b></font></blockquote></div></div></div></div></blockquote><div><div><div style="display:block;text-align:center;margin-right:auto;margin-left:auto"><div style="text-align:left"><b><font size="1" face="courier new, monospace"><br></font></b></div></div></div><blockquote style="margin:0 0 0 40px;border:none;padding:0px"><div style="display:block;text-align:center;margin-right:auto;margin-left:auto"><div style="text-align:left"><font size="3">The
 first parameter specifies the&nbsp;number of I/O pins used 
to&nbsp;connect pusbbuttons and the parameters after this&nbsp;specify 
each I/O pin, in sequence. &nbsp;For example, the&nbsp;declaration above
 specifies 3 pins, which are 2. 3 and 4. &nbsp;As shown in the diagram 
above, Wayneplexing allows you connect and read input from up to 6 
pushbuttons using just these 3 I/O pins.</font></div><div style="text-align:left"><font size="1"><br></font></div></div></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px"><div style="display:block;text-align:center;margin-right:auto;margin-left:auto"><div style="text-align:left"><font size="3">Note:
 you can&nbsp;declare&nbsp;multiple instances of this constructor to 
create different sets of pushbuttons. &nbsp;See example code for 
details.</font></div></div></blockquote><div><div style="display:block;text-align:center;margin-right:auto;margin-left:auto"><div style="text-align:left"><b><font size="4" face="courier new, monospace"><br></font></b></div><div style="text-align:left"><div style="text-align:center;margin-right:auto;margin-left:auto"><div style="text-align:left"><font size="5" face="courier new, monospace"><b><code>bool keyAvailable(void)</code></b></font></div><div style="text-align:left"><b><font size="1" face="courier new, monospace"><br></font></b></div></div></div><blockquote style="text-align:left;margin:0px 0px 0px 40px;border:none;padding:0px"><div style="text-align:center;margin-right:auto;margin-left:auto"><div style="text-align:left"><font size="3" face="verdana, sans-serif">Call this function in the </font><font size="3" face="courier new, monospace"><b>loop()</b></font><font size="3" face="verdana, sans-serif"> section of an Arduino Sketch. &nbsp;It returns true if a pushbutton was pressed and can be read by&nbsp;</font><font size="3" face="courier new, monospace"><b>getKeyIndex()</b></font><font size="3" face="verdana, sans-serif">. &nbsp;Note: this&nbsp;function is placed in <b>loop()</b> so that it's guaranteed to be called on a regular basis, which is&nbsp;necessary for&nbsp;</font><b><font size="4" face="courier new, monospace">KeyPlexLib</font></b><font size="3" face="verdana, sans-serif">&nbsp;to
 be able to scan and process pushbutton. &nbsp;You also need to call 
this function when using the callback feature, but you can ignore the 
return value.</font></div></div></blockquote><div style="text-align:left"><div style="text-align:center;margin-right:auto;margin-left:auto"><div style="text-align:left"><div style="text-align:center;margin-right:auto;margin-left:auto"><div style="text-align:left"><b><font size="4" face="courier new, monospace"><br></font></b></div></div></div></div></div><div style="text-align:left"><font size="5" face="courier new, monospace"><b><code>uint8_t getKeyIndex(void)</code></b></font></div><div style="text-align:left"><b><font size="1" face="courier new, monospace"><br></font></b></div></div></div><blockquote style="margin:0 0 0 40px;border:none;padding:0px"><div style="display:block;text-align:center;margin-right:auto;margin-left:auto"><div style="text-align:left"><font size="3" face="verdana, sans-serif">You call </font><font size="3" face="courier new, monospace"><b>getKeyIndex()</b></font><font size="3" face="verdana, sans-serif"> after </font><font size="3" face="courier new, monospace"><b>keyAvailable()</b></font><font size="3" face="verdana, sans-serif">&nbsp;returns&nbsp;true to get the 0-based index that indicates which key was pressed. &nbsp;</font><font size="3" face="verdana, sans-serif">In the schematic above, pressing key <b>S0</b> will return an index&nbsp;value of 0, pressing&nbsp;<b>S1</b>
 will return an&nbsp;index of 1, and so on. &nbsp;Note: it can be tricky
 to determine what index value will be returned by a Wayneplexed 
pushbutton, especially when 4, or more pins are being used. 
&nbsp;However, the example program&nbsp;</font><font size="3" face="courier new, monospace"><b>DirectDemo</b></font><font size="3"><font face="verdana, sans-serif">&nbsp;includes code in the </font><b><font face="courier new, monospace">init()</font></b><font face="verdana, sans-serif"> section that enumerates which pushbutton is connected to which pin.</font></font></div><div style="text-align:left"><font size="1" face="verdana, sans-serif"><br></font></div></div></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px"><div style="display:block;text-align:center;margin-right:auto;margin-left:auto"><div style="text-align:left"><font size="3"><font face="verdana, sans-serif">Note:&nbsp;</font></font><font size="3" face="verdana, sans-serif">Calling&nbsp;</font><font size="3" face="courier new, monospace"><b>getKeyIndex()</b></font><font size="3" face="verdana, sans-serif">&nbsp;without having first received a value of&nbsp;</font><font size="3" face="courier new, monospace"><b>true</b></font><font size="3" face="verdana, sans-serif">&nbsp;from a call to&nbsp;</font><font size="3" face="courier new, monospace"><b>keyAvailable()</b></font><font size="3" face="verdana, sans-serif">&nbsp;will cause the call not to return until a key is pressed, which will probably&nbsp;freeze your code.</font></div></div></blockquote><div><div style="display:block;text-align:center;margin-right:auto;margin-left:auto"><div style="text-align:left"><font size="3" face="verdana, sans-serif"><br></font></div></div><div><div style="text-align:center;margin-right:auto;margin-left:auto"><div style="text-align:left"><font size="5" face="courier new, monospace"><b><code>uint8_t getKeyPin(uint8_t idx)</code></b></font></div><div style="text-align:left"><b><font size="1" face="courier new, monospace"><br></font></b></div></div></div><blockquote style="margin:0px 0px 0px 40px;border:none;padding:0px"><div style="text-align:center;margin-right:auto;margin-left:auto"><div style="text-align:left"><font size="3" face="verdana, sans-serif">The example program&nbsp;</font><font size="3" face="courier new, monospace"><b>DirectDemo</b></font><font size="3"><font face="verdana, sans-serif">&nbsp;includes code in the&nbsp;</font><b><font face="courier new, monospace">init()</font></b><font face="verdana, sans-serif">&nbsp;section
 that uses this function to enumerate which pushbutton is connected to 
which pin. &nbsp;If passed a value of 1 - n, where n is the number of 
I/O pins defined in the constructor, this function will return the 
number of the nth I/O pin that was passed to the constructor. &nbsp;You 
should not normally need to use this function in normal code.</font></font></div></div></blockquote><div><div style="text-align:center;margin-right:auto;margin-left:auto"><div style="text-align:left"><div style="text-align:center;margin-right:auto;margin-left:auto"><div style="text-align:left"><b><font size="4" face="courier new, monospace"><br></font></b></div><div style="text-align:left"><b style="font-family:courier new,monospace"><font size="5"><code>void scanPlexKeys(bool enable)</code></font></b></div></div></div><div style="text-align:left"><div style="text-align:center;margin-right:auto;margin-left:auto"><div style="text-align:left"><div style="text-align:center;margin-right:auto;margin-left:auto"><div style="text-align:left"><b><font size="1" face="courier new, monospace"><br></font></b></div></div></div><blockquote style="text-align:left;margin:0px 0px 0px 40px;border:none;padding:0px"><div style="text-align:center;margin-right:auto;margin-left:auto"><div style="text-align:left"><font size="3" face="verdana, sans-serif">You call this function to enable, or disable Wayneplexing on the&nbsp;</font><span style="font-family:verdana,sans-serif;font-size:medium">specified </span><span style="font-size:medium"><font face="courier new, monospace"><b>KeyPlexLib</b></font></span><span style="font-family:verdana,sans-serif;font-size:medium"> object</span><font size="3"><font face="verdana, sans-serif">.
 &nbsp;By default, Wayneplexing is off and any Wayneplex-connected 
pushbuttons will not operate until this function is called with </font><b><font face="courier new, monospace">true</font></b><font face="verdana, sans-serif"> as the parameter passed.</font></font></div><div style="text-align:left"><font size="1" face="verdana, sans-serif"><br></font></div></div></blockquote><blockquote style="text-align:left;margin:0px 0px 0px 40px;border:none;padding:0px"><div style="text-align:center;margin-right:auto;margin-left:auto"><div style="text-align:left"><font size="3" face="verdana, sans-serif"><b>Important: </b>When<b>&nbsp;</b>Wayneplexing is enabled, </font><font size="3" face="courier new, monospace"><b>KeyPlexLib</b></font><font size="3" face="verdana, sans-serif">&nbsp;switches to an alternate mode in which chording (</font><span style="font-size:medium;background-color:transparent">pressing and holding multiple pushbuttons at the same time</span><font size="3" face="verdana, sans-serif">) of the ground-connected buttons is disabled and&nbsp;</font><font size="3" face="verdana, sans-serif">only
 one pushbutton in the&nbsp;entire set of buttons can be pressed at a 
time. &nbsp;Chording is supported when Wayneplexind disabled, but only 
ground-connected keys will function. </font><font size="3" face="verdana, sans-serif">Please understand the implications of this limitation in your design and plan accordingly.</font></div></div></blockquote><div style="text-align:left"><div style="text-align:center;margin-right:auto;margin-left:auto"><div style="text-align:left"><div style="text-align:center;margin-right:auto;margin-left:auto"><div style="text-align:left"><b><font size="4" face="courier new, monospace"><br></font></b></div><div style="text-align:left"><font size="5" face="courier new, monospace"><b><code>uint8_t getPinCount(void)</code></b></font></div><div style="text-align:left"><b><font size="1" face="courier new, monospace"><br></font></b></div></div></div><blockquote style="text-align:left;margin:0px 0px 0px 40px;border:none;padding:0px"><div style="text-align:center;margin-right:auto;margin-left:auto"><div style="text-align:left"><font size="3" face="verdana, sans-serif">This function returns the&nbsp;number of pins used by the&nbsp;</font><span style="font-family:verdana,sans-serif;font-size:medium">specified</span><font size="3" face="verdana, sans-serif">&nbsp;</font><font size="3" face="courier new, monospace"><b>KeyPlexLib</b></font><font size="3" face="verdana, sans-serif">
 object. &nbsp;You shouldn't normally need to call&nbsp;this function. 
&nbsp;It&nbsp;provided to support the example code that enumerates how 
pushbuttons are connected to the I/O pins (see&nbsp;</font><font size="3" face="verdana, sans-serif">the example program&nbsp;</font><font size="3" face="courier new, monospace"><b>DirectDemo</b>.)</font></div></div></blockquote><div style="text-align:left"><div style="text-align:left;margin-right:auto;margin-left:auto"><font size="3" face="verdana, sans-serif"><br></font></div><div style="text-align:center;margin-right:auto;margin-left:auto"><div style="text-align:left"><div style="text-align:center;margin-right:auto;margin-left:auto"><div style="text-align:left"><font size="5" face="courier new, monospace"><b><code>void setCallback (void (*keyCallback)(uint8_t key, bool pressed))</code></b></font></div><div style="text-align:left"><b><font size="1" face="courier new, monospace"><br></font></b></div></div></div><blockquote style="text-align:left;margin:0px 0px 0px 40px;border:none;padding:0px"><div style="text-align:center;margin-right:auto;margin-left:auto"><div style="text-align:left"><font size="3" face="verdana, sans-serif">Call this function to configure a callback from the&nbsp;</font><span style="font-family:verdana,sans-serif;font-size:medium;background-color:transparent">specified </span><span style="font-size:medium;background-color:transparent"><font face="courier new, monospace"><b>KeyPlexLib</b></font></span><span style="font-family:verdana,sans-serif;font-size:medium;background-color:transparent"> object whenever a key is pressed, or released. &nbsp;See the example program&nbsp;</span><span style="text-align:center;background-color:transparent"><font size="3" face="courier new, monospace"><b>CallbackDemo</b></font><font size="3" face="verdana, sans-serif"> for details on how to use this function.</font></span></div></div></blockquote><div style="text-align:left"></div></div></div></div></div></div></div></div></div></div></div></div></td></tr></tbody></table>
</div> 
</div>
</td>
</tr>
</tbody></table>
</div>
</div>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
    window.jstiming.load.tick('sjl');
  </script>
<script xmlns="http://www.w3.org/1999/xhtml" src="keyplexlib-wayneplexing-on-arduino-made-easy%20Archivos/jot_min_view__en.js"></script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
    window.jstiming.load.tick('jl');
  </script>
<script xmlns="http://www.w3.org/1999/xhtml">if (webspace.editorResources['text']) {webspace.editorResources['text'].unshift('\/site\/wayneholder\/system\/app\/css\/overlay.css?cb\x3dsimple150goog-ws-nosidenone');webspace.editorResources['text'].unshift('\/site\/wayneholder\/_\/rsrc\/1559805672000\/system\/app\/themes\/simple\/standard-css-simple-ltr-ltr.css');}</script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
  setTimeout(function() {
    var fingerprint = gsites.date.TimeZone.getFingerprint([1109635200000, 1128902400000, 1130657000000, 1143333000000, 1143806400000, 1145000000000, 1146380000000, 1152489600000, 1159800000000, 1159500000000, 1162095000000, 1162075000000, 1162105500000]);
    gsites.Xhr.send('https://sites.google.com/site/wayneholder/_/tz', null, null, 'GET', null, null, { afjstz: fingerprint });
  }, 500);
</script>
<script xmlns="http://www.w3.org/1999/xhtml">
                    window.onload = function() {
                      if (false) {
                        JOT_setMobilePreview();
                      }
                      var loadTimer = window.jstiming.load;
                      loadTimer.tick("ol");
                      loadTimer["name"] = "load," + webspace.page.type + ",user_page";
                      window.jstiming.report(loadTimer, {}, 'https://gg.google.com/csi');
                    }
                  </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
        JOT_insertAnalyticsCode(false,
            false);
      </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
    var maestroRunner = new gsites.pages.view.SitesMaestroRunner(
        webspace, "en");
    maestroRunner.initListeners();
    maestroRunner.installEditRender();
  </script>
<script xmlns="http://www.w3.org/1999/xhtml">
        JOT_insertTranslateCode('es', 'en');
      </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript" defer="true">
  //<![CDATA[
    // Decorate any fastUI buttons on the page with a class of 'goog-button'.
    if (webspace.user.hasWriteAccess) {
      JOT_decorateButtons();
    }

    // Fires delayed events.
    (function() {
      JOT_fullyLoaded = true;
      var delayedEvents = JOT_delayedEvents;
      for (var x = 0; x < delayedEvents.length; x++) {
        var event = delayedEvents[x];
        JOT_postEvent(event.eventName, event.eventSrc, event.payload);
      }
      JOT_delayedEvents = null;
      JOT_postEvent('pageLoaded');
    })();
  //]]>
</script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
    JOT_postEvent('decorateGvizCharts');
  </script>
<script type="text/javascript">
              
              window.setTimeout(window.print, 1000);
            </script><div id="goog-gt-tt" class="skiptranslate" dir="ltr"><div style="padding: 8px;"><div><div class="logo"><img src="keyplexlib-wayneplexing-on-arduino-made-easy%20Archivos/translate_24dp.png" alt="Google Traductor de Google" width="20" height="20"></div></div></div><div class="top" style="padding: 8px; float: left; width: 100%;"><h1 class="title gray">Texto original</h1></div><div class="middle" style="padding: 8px;"><div class="original-text"></div></div><div class="bottom" style="padding: 8px;"><div class="activity-links"><span class="activity-link">Sugiere una traducción mejor</span><span class="activity-link"></span></div><div class="started-activity-container"><hr style="color: #CCC; background-color: #CCC; height: 1px; border: none;"><div class="activity-root"></div></div></div><div class="status-message" style="display: none;"></div></div>


<div class="goog-te-spinner-pos"><div class="goog-te-spinner-animation"><svg xmlns="http://www.w3.org/2000/svg" class="goog-te-spinner" width="96px" height="96px" viewBox="0 0 66 66"><circle class="goog-te-spinner-path" fill="none" stroke-width="6" stroke-linecap="round" cx="33" cy="33" r="30"></circle></svg></div></div><div style="box-sizing: content-box; width: 85px; height: 24px;" id=":0.floatContainer" class=" goog-te-ftab-float"><iframe id=":0.container" src="javascript:''" class="goog-te-ftab-frame skiptranslate" style="visibility: visible; box-sizing: content-box; width: 85px; height: 24px;" frameborder="0"></iframe></div></body></html>